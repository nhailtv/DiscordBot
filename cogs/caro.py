from discord.ext import commands
from discord.ext.commands import Context

class Caro(commands.Cog, name="caro"):
    def __init__(self, bot) -> None:
        self.bot = bot

    @commands.hybrid_command(
        name="caro",
        description="This is a command generated by your request.",
    )
    async def caro(self, context: Context, opponent: discord.Member) -> None:
        # Check if the opponent is the same as the challenger
        if opponent == context.author:
            await context.send("You can't play against yourself!")
            return

        # Board setup
        board_size = 15  # Example size
        board = [['-' for _ in range(board_size)] for _ in range(board_size)]

        current_player = 'X'  # X goes first

        def print_board():
            board_str = ""
            for row in board:
                board_str += " ".join(row) + "\n"
            return board_str

        def check_win(player):
            # Check rows, columns, and diagonals for a win
            for i in range(board_size):
                for j in range(board_size - 4):
                    if all(board[i][j + k] == player for k in range(5)):
                        return True
                    if all(board[j + k][i] == player for k in range(5)):
                        return True

            for i in range(board_size - 4):
                for j in range(board_size - 4):
                    if all(board[i + k][j + k] == player for k in range(5)):
                        return True
                    if all(board[i + k][j + 4 - k] == player for k in range(5)):
                        return True
            return False



        await context.send(f"Caro game started between {context.author.mention} and {opponent.mention}!")
        await context.send(print_board())

        while True:
            if current_player == 'X':
                player = context.author
            else:
                player = opponent

            await context.send(f"{player.mention}, enter your move (row, col) as 'row col' (e.g., '3 4'):")

            def check(m):
                return m.author == player and m.channel == context.channel

            try:
                msg = await self.bot.wait_for('message', timeout=60.0, check=check)
                try:
                    row, col = map(int, msg.content.split())
                    if 0 <= row < board_size and 0 <= col < board_size and board[row][col] == '-':
                        board[row][col] = current_player

                        await context.send(print_board())

                        if check_win(current_player):
                            await context.send(f"{player.mention} wins!")
                            return

                        current_player = 'O' if current_player == 'X' else 'X'

                    else:
                        await context.send("Invalid move. Please try again.")
                except ValueError:
                    await context.send("Invalid input format. Please enter 'row col'.")
            except TimeoutError:
                await context.send(f"{player.mention} timed out. Game over!")
                return



async def setup(bot) -> None:
    await bot.add_cog(Caro(bot))